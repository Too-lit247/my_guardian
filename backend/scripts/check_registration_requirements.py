import requests
import json

def check_registration_requirements():
    print("=== REGISTRATION ENDPOINT REQUIREMENTS ===\n")
    
    print("üìã REQUIRED FIELDS for /api/accounts/register/:")
    print("-" * 50)
    print("‚úÖ REQUIRED - username (must be unique)")
    print("‚úÖ REQUIRED - email (must be unique and valid)")
    print("‚úÖ REQUIRED - full_name")
    print("‚úÖ REQUIRED - password (must meet validation)")
    print("‚úÖ REQUIRED - department")
    print("‚ö™ OPTIONAL - phone_number")
    
    print("\n" + "="*60)
    print("üìù DEPARTMENT CHOICES:")
    print("-" * 30)
    print("  ‚Ä¢ fire - Fire Department")
    print("  ‚Ä¢ police - Police Department") 
    print("  ‚Ä¢ medical - Medical Department")
    print("  ‚Ä¢ admin - System Administrator")
    
    print("\n" + "="*60)
    print("üîß EXAMPLE REGISTRATION REQUEST:")
    print("-" * 40)
    
    example = {
        "username": "john_doe",
        "email": "john.doe@fire.gov.mw", 
        "full_name": "John Doe",
        "phone_number": "+265991234567",
        "password": "SecurePassword123!",
        "department": "fire"
    }
    
    print(json.dumps(example, indent=2))
    
    print("\n" + "="*60)
    print("‚ö†Ô∏è  IMPORTANT NOTES:")
    print("-" * 25)
    print("‚Ä¢ Users will be created as INACTIVE by default")
    print("‚Ä¢ Admin approval required before login")
    print("‚Ä¢ Role will be automatically set to 'Field User'")
    print("‚Ä¢ Password must meet Django validation requirements")
    print("‚Ä¢ Email must be unique")
    print("‚Ä¢ Username must be unique")
    
    print("\n" + "="*60)
    print("üß™ TESTING REGISTRATION ENDPOINT:")
    print("-" * 40)
    
    # Test the endpoint
    url = "http://127.0.0.1:8000/api/auth/register/"
    
    test_data = {
        "username": "test_user_123",
        "email": "test123@example.com",
        "full_name": "Test User",
        "phone_number": "+265991234567",
        "password": "TestPassword123!",
        "department": "fire"
    }
    
    try:
        print(f"Making POST request to: {url}")
        print(f"With data: {json.dumps(test_data, indent=2)}")
        
        response = requests.post(url, json=test_data)
        
        print(f"\nüìä RESPONSE:")
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text}")
        
        if response.status_code == 400:
            print("\n‚ùå BAD REQUEST - Check the error details above")
            try:
                error_data = response.json()
                print("Specific errors:")
                for field, errors in error_data.items():
                    print(f"  ‚Ä¢ {field}: {errors}")
            except:
                print("Could not parse error response")
                
        elif response.status_code == 201:
            print("\n‚úÖ SUCCESS - User registered successfully")
            
        elif response.status_code == 500:
            print("\nüî• SERVER ERROR - Check Django server logs")
            
    except requests.exceptions.ConnectionError:
        print("\n‚ùå CONNECTION ERROR")
        print("Make sure Django server is running:")
        print("cd backend && python manage.py runserver")
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")

if __name__ == "__main__":
    check_registration_requirements()

