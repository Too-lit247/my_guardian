# Generated by Django 4.2.7 on 2025-06-19 08:56

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DepartmentRegistration',
            fields=[
                ('registration_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('department_name', models.CharField(max_length=200)),
                ('department_type', models.CharField(choices=[('fire', 'Fire Department'), ('police', 'Police Department'), ('medical', 'Medical Department'), ('emergency', 'Emergency Services')], max_length=20)),
                ('registration_number', models.CharField(max_length=50, unique=True)),
                ('contact_person', models.CharField(max_length=100)),
                ('contact_email', models.EmailField(max_length=254)),
                ('contact_phone', models.CharField(max_length=17)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=50)),
                ('zip_code', models.CharField(max_length=10)),
                ('country', models.CharField(default='United States', max_length=50)),
                ('coverage_description', models.TextField(help_text='Description of the area covered by this department')),
                ('population_served', models.PositiveIntegerField(help_text='Approximate population served')),
                ('license_document', models.FileField(help_text='Department license/certification', upload_to='department_docs/')),
                ('insurance_document', models.FileField(blank=True, upload_to='department_docs/')),
                ('additional_documents', models.FileField(blank=True, upload_to='department_docs/')),
                ('regional_manager_name', models.CharField(max_length=100)),
                ('regional_manager_email', models.EmailField(max_length=254)),
                ('regional_manager_phone', models.CharField(max_length=17)),
                ('regional_manager_credentials', models.TextField(help_text='Qualifications and experience')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=20)),
                ('reviewed_by_id', models.UUIDField(blank=True, help_text='ID of user who reviewed', null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'department_registrations',
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('device_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mac_address', models.CharField(help_text='MAC address of the device', max_length=17, unique=True)),
                ('serial_number', models.CharField(max_length=50, unique=True)),
                ('device_type', models.CharField(choices=[('guardian_bracelet', 'Guardian Bracelet'), ('guardian_watch', 'Guardian Watch'), ('guardian_pendant', 'Guardian Pendant'), ('guardian_ring', 'Guardian Ring')], default='guardian_bracelet', max_length=20)),
                ('owner_id', models.UUIDField(blank=True, help_text='ID of the person wearing the device', null=True)),
                ('owner_name', models.CharField(help_text='Name of the person wearing the device', max_length=100)),
                ('owner_phone', models.CharField(help_text='Emergency contact number', max_length=17)),
                ('owner_address', models.TextField(help_text='Home address')),
                ('emergency_contact', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=17)),
                ('medical_conditions', models.TextField(blank=True, help_text='Known medical conditions')),
                ('medications', models.TextField(blank=True, help_text='Current medications')),
                ('allergies', models.TextField(blank=True, help_text='Known allergies')),
                ('blood_type', models.CharField(blank=True, max_length=5)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('maintenance', 'Maintenance'), ('lost', 'Lost/Stolen')], default='active', max_length=20)),
                ('battery_level', models.IntegerField(default=100, help_text='Battery percentage')),
                ('last_heartbeat', models.DateTimeField(blank=True, null=True)),
                ('firmware_version', models.CharField(default='1.0.0', max_length=20)),
                ('last_known_latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('last_known_longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('last_location_update', models.DateTimeField(blank=True, null=True)),
                ('audio_monitoring_enabled', models.BooleanField(default=True)),
                ('heart_rate_monitoring_enabled', models.BooleanField(default=True)),
                ('fire_monitoring_enabled', models.BooleanField(default=True)),
                ('fall_detection_enabled', models.BooleanField(default=True)),
                ('monitoring_interval', models.IntegerField(default=300, help_text='Monitoring interval in seconds')),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('registered_by_id', models.UUIDField(blank=True, help_text='ID of user who registered this device', null=True)),
            ],
            options={
                'db_table': 'devices',
                'ordering': ['-registered_at'],
            },
        ),
        migrations.CreateModel(
            name='DeviceReading',
            fields=[
                ('reading_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reading_type', models.CharField(choices=[('audio', 'Audio Analysis'), ('heart_rate', 'Heart Rate'), ('temperature', 'Temperature'), ('smoke', 'Smoke Detection'), ('location', 'Location Update'), ('battery', 'Battery Status')], max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('heart_rate', models.IntegerField(blank=True, null=True)),
                ('temperature', models.FloatField(blank=True, null=True)),
                ('smoke_level', models.FloatField(blank=True, null=True)),
                ('battery_level', models.IntegerField(blank=True, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('audio_file', models.FileField(blank=True, null=True, upload_to='audio_samples/')),
                ('fear_probability', models.FloatField(blank=True, help_text='Probability of fear detected (0-1)', null=True)),
                ('stress_level', models.FloatField(blank=True, help_text='Stress level detected (0-1)', null=True)),
                ('audio_analysis_complete', models.BooleanField(default=False)),
                ('is_emergency', models.BooleanField(default=False)),
                ('triggered_by', models.CharField(blank=True, max_length=100)),
                ('raw_data', models.JSONField(blank=True, default=dict)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='readings', to='devices.device')),
            ],
            options={
                'db_table': 'device_readings',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EmergencyTrigger',
            fields=[
                ('trigger_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('trigger_type', models.CharField(choices=[('fear_detected', 'Fear Detected'), ('high_heart_rate', 'High Heart Rate'), ('fire_detected', 'Fire Detected'), ('panic_button', 'Panic Button'), ('device_offline', 'Device Offline'), ('fall_detected', 'Fall Detected')], max_length=20)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('trigger_value', models.FloatField(help_text='The value that triggered the alert')),
                ('threshold_value', models.FloatField(help_text='The threshold that was exceeded')),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('alert_created_id', models.UUIDField(blank=True, help_text='ID of created alert', null=True)),
                ('acknowledged', models.BooleanField(default=False)),
                ('acknowledged_by_id', models.UUIDField(blank=True, help_text='ID of user who acknowledged', null=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('triggered_at', models.DateTimeField(auto_now_add=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emergency_triggers', to='devices.device')),
                ('reading', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='devices.devicereading')),
            ],
            options={
                'db_table': 'emergency_triggers',
                'ordering': ['-triggered_at'],
            },
        ),
        migrations.AddIndex(
            model_name='devicereading',
            index=models.Index(fields=['device', '-timestamp'], name='device_read_device__c4cee8_idx'),
        ),
        migrations.AddIndex(
            model_name='devicereading',
            index=models.Index(fields=['reading_type', '-timestamp'], name='device_read_reading_98f0a0_idx'),
        ),
        migrations.AddIndex(
            model_name='devicereading',
            index=models.Index(fields=['is_emergency', '-timestamp'], name='device_read_is_emer_3fe2ed_idx'),
        ),
    ]
